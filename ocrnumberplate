import cv2
import pytesseract
import os
import numpy as np
import datetime
import time
import random

# Tesseract OCR path (REPLACE with your path)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe'

# Haar Cascade for number plate detection (REPLACE with your path)
plateCascade = cv2.CascadeClassifier(r"C:\Users\chitr\Documents\OneDrive\Music\DT\Digital-Twin-Security-IoT-main\IoT-model\sample-IoT-model\haarcascade_russian_plate_number.xml")

# State codes mapping
states = {
    "AN": "Andaman and Nicobar Islands", "AP": "Andhra Pradesh", "AR": "Arunachal Pradesh",
    "AS": "Assam", "BR": "Bihar", "CG": "Chhattisgarh", "CH": "Chandigarh",
    "DD": "Daman and Diu", "DL": "Delhi", "GA": "Goa", "GJ": "Gujarat",
    "HR": "Haryana", "HP": "Himachal Pradesh", "JH": "Jharkhand",
    "JK": "Jammu and Kashmir", "KA": "Karnataka", "KL": "Kerala",
    "LD": "Lakshadweep", "MH": "Maharashtra", "MN": "Manipur",
    "MP": "Madhya Pradesh", "MZ": "Mizoram", "NL": "Nagaland",
    "OR": "Odisha", "PB": "Punjab", "PY": "Puducherry",
    "RJ": "Rajasthan", "SK": "Sikkim", "TN": "Tamil Nadu",
    "TR": "Tripura", "TS": "Telangana", "UK": "Uttarakhand",
    "UP": "Uttar Pradesh", "WB": "West Bengal"
}

minArea = 1500  # Adjust as needed

images_folder = r"C:\Users\chitr\Documents\OneDrive\Music\DT\Digital-Twin-Security-IoT-main\Dataset"
detected_plates_folder = r"C:\Users\chitr\Documents\OneDrive\Music\DT\Digital-Twin-Security-IoT-main\Detected_Plates"

if not os.path.exists(detected_plates_folder):
    os.makedirs(detected_plates_folder)

count = 0

while True:
    image_files = [f for f in os.listdir(images_folder) if os.path.isfile(os.path.join(images_folder, f))]
    if not image_files:
        print("No images found in the folder.")
        time.sleep(3)
        continue

    random_image_file = random.choice(image_files)
    image_path = os.path.join(images_folder, random_image_file)

    print(f"Processing image: {image_path}")

    try:
        img = cv2.imread(image_path)
        if img is None:
            raise ValueError(f"Image {image_path} not found or could not be loaded.")

        img_original = img.copy()
        img = cv2.resize(img, (800, 600))
        imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        kernel = np.ones((3, 3), np.uint8)
        imgGray = cv2.morphologyEx(imgGray, cv2.MORPH_CLOSE, kernel)
        imgGray = cv2.equalizeHist(imgGray)
        imgGray = cv2.GaussianBlur(imgGray, (5, 5), 0)

        _, imgThresh = cv2.threshold(imgGray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

        numberPlates = plateCascade.detectMultiScale(imgGray, 1.1, 4)

        saved = False

        for (x, y, w, h) in numberPlates:
            area = w * h
            if area > minArea:
                cv2.rectangle(img_original, (x, y, w, h), (255, 0, 0), 2)
                cv2.putText(img_original, "Number Plate", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)
                imgRoi = img[y:y + h, x:x + w]

                imgRoiGray = cv2.cvtColor(imgRoi, cv2.COLOR_BGR2GRAY)
                _, imgRoiThresh = cv2.threshold(imgRoiGray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                kernel = np.ones((2, 2), np.uint8)
                imgRoiThresh = cv2.morphologyEx(imgRoiThresh, cv2.MORPH_OPEN, kernel)
                kernel = np.ones((3,3),np.uint8)
                imgRoiThresh = cv2.dilate(imgRoiThresh, kernel, iterations=1)

                read = pytesseract.image_to_string(imgRoiThresh, config='--psm 6')
                read = "".join([c for c in read if c.isalnum() or c.isspace()])
                read = read.strip()

                if read:
                    state_code = read[:2].upper()
                    state_name = states.get(state_code, "Unknown")

                    print(f"Detected Plate: {read} | State: {state_name}")
                    now = datetime.datetime.now()
                    date_time = now.strftime('%Y-%m-%d %H:%M')
                    print(f"Time: {date_time}")

                    cv2.imshow("Number Plate", imgRoiThresh)

                    if not saved:
                        save_file = os.path.join(detected_plates_folder, f"plate_{count}.jpg")
                        cv2.imwrite(save_file, imgRoiThresh)
                        print(f"ðŸ“¸ Saved: {save_file}")
                        count += 1
                        saved = True

        cv2.imshow("Result", img_original)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    time.sleep(3)
