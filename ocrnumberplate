```
import cv2
import pytesseract
import os
import numpy as np
import datetime
import time
import ssl
import board
import adafruit_dht
import paho.mqtt.client as mqtt

# Set Tesseract path (modify for Raspberry Pi)
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'  # For Linux (Pi)

# Haar Cascade path
plateCascade = cv2.CascadeClassifier('/home/pi/haarcascade_russian_plate_number.xml')

# MQTT Configuration
MQTT_BROKER = "054a692930274fb1a433891ca5b5d023.s1.eu.hivemq.cloud"
MQTT_PORT = 8883
MQTT_CLIENT_ID = "pico"
MQTT_USER = "Priyanshu08"
MQTT_PASSWORD = "Allsmall88"

# Topics for publishing data
pub_topic_temperature = "topic/sensors/temperature"
pub_topic_humidity = "topic/sensors/humidity"
pub_topic_ocr = "topic/sensors/ocr"

# DHT11 Sensor Configuration
DHT_PIN = board.D4
dht_device = adafruit_dht.DHT11(DHT_PIN, use_pulseio=False)

# Image Processing Paths
images_folder = "/home/pi/images"
detected_plates_folder = "/home/pi/Detected_Plates"
os.makedirs(detected_plates_folder, exist_ok=True)


def setup_mqtt_client():
    mqtt_client = mqtt.Client(client_id=MQTT_CLIENT_ID, protocol=mqtt.MQTTv5)
    mqtt_client.username_pw_set(MQTT_USER, MQTT_PASSWORD)
    mqtt_client.tls_set(ca_certs=None, certfile=None, keyfile=None,
                         cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.PROTOCOL_TLS, ciphers=None)
    mqtt_client.connect(MQTT_BROKER, port=MQTT_PORT)
    mqtt_client.loop_start()
    print("Connected to MQTT Broker")
    return mqtt_client


def read_temperature_humidity():
    try:
        temperature_c = dht_device.temperature
        humidity = dht_device.humidity
        return temperature_c, humidity
    except RuntimeError:
        return None, None


def detect_number_plate(image_path):
    img = cv2.imread(image_path)
    if img is None:
        print(f"Error loading image {image_path}")
        return None

    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    plates = plateCascade.detectMultiScale(imgGray, 1.1, 4)

    for (x, y, w, h) in plates:
        plate_roi = img[y:y + h, x:x + w]
        plate_gray = cv2.cvtColor(plate_roi, cv2.COLOR_BGR2GRAY)
        _, plate_thresh = cv2.threshold(plate_gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

        # OCR Extraction
        plate_text = pytesseract.image_to_string(plate_thresh, config='--psm 6').strip()
        plate_text = "".join([c for c in plate_text if c.isalnum()])

        if plate_text:
            save_file = os.path.join(detected_plates_folder, f"plate_{time.time()}.jpg")
            cv2.imwrite(save_file, plate_thresh)
            print(f"Detected Plate: {plate_text}")
            return plate_text

    return None


def publish_sensor_reading(mqtt_client, topic, message):
    mqtt_client.publish(topic, message)
    print(f"Published: {topic} → {message}")


def main():
    mqtt_client = setup_mqtt_client()

    try:
        while True:
            # Read Temperature & Humidity
            temperature_c, humidity = read_temperature_humidity()
            if temperature_c and humidity:
                publish_sensor_reading(mqtt_client, pub_topic_temperature, f"{temperature_c:.2f}°C")
                publish_sensor_reading(mqtt_client, pub_topic_humidity, f"{humidity:.2f}%")

            # Process Image from Folder
            image_files = [f for f in os.listdir(images_folder) if os.path.isfile(os.path.join(images_folder, f))]
            if image_files:
                random_image = os.path.join(images_folder, random.choice(image_files))
                plate_number = detect_number_plate(random_image)

                if plate_number:
                    publish_sensor_reading(mqtt_client, pub_topic_ocr, f"Plate: {plate_number}")

            time.sleep(5)

    except KeyboardInterrupt:
        print("Exiting Program")

    finally:
        mqtt_client.loop_stop()
        mqtt_client.disconnect()
        print("Disconnected from MQTT")


if __name__ == "__main__":
    main()
```
