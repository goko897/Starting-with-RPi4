import cv2
import pytesseract
import numpy as np
import datetime
import paho.mqtt.client as mqtt

# Load Haar Cascade for number plate detection
plateCascade = cv2.CascadeClassifier('/home/pi/haarcascade_russian_plate_number.xml')

# MQTT Setup
MQTT_BROKER = "broker.hivemq.com"
MQTT_PORT = 1883
MQTT_TOPIC = "iot/number_plate"

# Initialize MQTT Client
client = mqtt.Client()
client.connect(MQTT_BROKER, MQTT_PORT, 60)

# Define valid state codes
states = {
    "AN": "Andaman and Nicobar Islands", "AP": "Andhra Pradesh", "AR": "Arunachal Pradesh",
    "AS": "Assam", "BR": "Bihar", "CG": "Chhattisgarh", "CH": "Chandigarh",
    "DD": "Daman and Diu", "DL": "Delhi", "GA": "Goa", "GJ": "Gujarat",
    "HR": "Haryana", "HP": "Himachal Pradesh", "JH": "Jharkhand",
    "JK": "Jammu and Kashmir", "KA": "Karnataka", "KL": "Kerala",
    "LD": "Lakshadweep", "MH": "Maharashtra", "MN": "Manipur",
    "MP": "Madhya Pradesh", "MZ": "Mizoram", "NL": "Nagaland",
    "OR": "Odisha", "PB": "Punjab", "PY": "Puducherry",
    "RJ": "Rajasthan", "SK": "Sikkim", "TN": "Tamil Nadu",
    "TR": "Tripura", "TS": "Telangana", "UK": "Uttarakhand",
    "UP": "Uttar Pradesh", "WB": "West Bengal"
}

# Video capture setup
cap = cv2.VideoCapture(0)
cap.set(3, 1000)
cap.set(4, 480)
cap.set(10, 150)  # Brightness

minArea = 3000  # Minimum area for detection
valid_plate_detected = False  # Stop after a valid plate is detected

def preprocess_plate(img):
    """Enhances the plate image for better OCR results."""
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray = cv2.bilateralFilter(gray, 13, 15, 15)
    thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 19, 9)
    kernel = np.ones((3, 3), np.uint8)
    morph = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel, iterations=1)
    return morph

def is_valid_plate(text):
    """Filters out incorrect OCR results."""
    text = text.replace(" ", "").upper()
    return len(text) >= 6 and len(text) <= 10 and text[:2] in states

while not valid_plate_detected:
    success, img = cap.read()
    if not success:
        print("❌ Failed to capture image")
        break

    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    numberPlates = plateCascade.detectMultiScale(imgGray, 1.1, 5)

    for (x, y, w, h) in numberPlates:
        area = w * h
        if area > minArea:
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(img, "Number Plate", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
            imgRoi = img[y:y + h, x:x + w]
            imgRoiProcessed = preprocess_plate(imgRoi)
            read = pytesseract.image_to_string(imgRoiProcessed, config='--psm 7')
            read = "".join([c for c in read if c.isalnum()]).strip()
            
            if is_valid_plate(read):
                state_code = read[:2]
                state_name = states.get(state_code, "Unknown")
                now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
                
                print(f"✅ Detected Plate: {read} | State: {state_name} | 📅 Time: {now}")
                
                # Publish to MQTT
                mqtt_message = f"Plate: {read}, State: {state_name}, Time: {now}"
                client.publish(MQTT_TOPIC, mqtt_message)
                print(f"📡 Sent to MQTT: {mqtt_message}")
                
                valid_plate_detected = True
                break  # Stop further processing
    
    cv2.imshow("Result", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
client.disconnect()
